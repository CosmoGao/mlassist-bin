# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import CGData_pb2 as CGData__pb2


class MLRpcServiceStub(object):
    """HookDll用来通信，暂时不启用
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Initialize = channel.unary_unary(
                '/CGData.MLRpcService/Initialize',
                request_serializer=CGData__pb2.CGGmeTypeRequest.SerializeToString,
                response_deserializer=CGData__pb2.CGVoidData.FromString,
                )
        self.Connect = channel.unary_unary(
                '/CGData.MLRpcService/Connect',
                request_serializer=CGData__pb2.CGVoidData.SerializeToString,
                response_deserializer=CGData__pb2.CGBoolData.FromString,
                )
        self.IsInGame = channel.unary_unary(
                '/CGData.MLRpcService/IsInGame',
                request_serializer=CGData__pb2.CGVoidData.SerializeToString,
                response_deserializer=CGData__pb2.CGIntData.FromString,
                )
        self.GetWorldStatus = channel.unary_unary(
                '/CGData.MLRpcService/GetWorldStatus',
                request_serializer=CGData__pb2.CGVoidData.SerializeToString,
                response_deserializer=CGData__pb2.CGIntData.FromString,
                )
        self.GetGameStatus = channel.unary_unary(
                '/CGData.MLRpcService/GetGameStatus',
                request_serializer=CGData__pb2.CGVoidData.SerializeToString,
                response_deserializer=CGData__pb2.CGIntData.FromString,
                )
        self.GetBGMIndex = channel.unary_unary(
                '/CGData.MLRpcService/GetBGMIndex',
                request_serializer=CGData__pb2.CGVoidData.SerializeToString,
                response_deserializer=CGData__pb2.CGIntData.FromString,
                )
        self.GetSysTime = channel.unary_unary(
                '/CGData.MLRpcService/GetSysTime',
                request_serializer=CGData__pb2.CGVoidData.SerializeToString,
                response_deserializer=CGData__pb2.CGSysTimeResponse.FromString,
                )
        self.GetPlayerInfo = channel.unary_unary(
                '/CGData.MLRpcService/GetPlayerInfo',
                request_serializer=CGData__pb2.CGVoidData.SerializeToString,
                response_deserializer=CGData__pb2.CGCharacterData.FromString,
                )
        self.SetPlayerFlagEnabled = channel.unary_unary(
                '/CGData.MLRpcService/SetPlayerFlagEnabled',
                request_serializer=CGData__pb2.CGPlayerFlagEnabledData.SerializeToString,
                response_deserializer=CGData__pb2.CGVoidData.FromString,
                )


class MLRpcServiceServicer(object):
    """HookDll用来通信，暂时不启用
    """

    def Initialize(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Connect(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def IsInGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorldStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetGameStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetBGMIndex(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetSysTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPlayerInfo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetPlayerFlagEnabled(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MLRpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Initialize': grpc.unary_unary_rpc_method_handler(
                    servicer.Initialize,
                    request_deserializer=CGData__pb2.CGGmeTypeRequest.FromString,
                    response_serializer=CGData__pb2.CGVoidData.SerializeToString,
            ),
            'Connect': grpc.unary_unary_rpc_method_handler(
                    servicer.Connect,
                    request_deserializer=CGData__pb2.CGVoidData.FromString,
                    response_serializer=CGData__pb2.CGBoolData.SerializeToString,
            ),
            'IsInGame': grpc.unary_unary_rpc_method_handler(
                    servicer.IsInGame,
                    request_deserializer=CGData__pb2.CGVoidData.FromString,
                    response_serializer=CGData__pb2.CGIntData.SerializeToString,
            ),
            'GetWorldStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorldStatus,
                    request_deserializer=CGData__pb2.CGVoidData.FromString,
                    response_serializer=CGData__pb2.CGIntData.SerializeToString,
            ),
            'GetGameStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetGameStatus,
                    request_deserializer=CGData__pb2.CGVoidData.FromString,
                    response_serializer=CGData__pb2.CGIntData.SerializeToString,
            ),
            'GetBGMIndex': grpc.unary_unary_rpc_method_handler(
                    servicer.GetBGMIndex,
                    request_deserializer=CGData__pb2.CGVoidData.FromString,
                    response_serializer=CGData__pb2.CGIntData.SerializeToString,
            ),
            'GetSysTime': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSysTime,
                    request_deserializer=CGData__pb2.CGVoidData.FromString,
                    response_serializer=CGData__pb2.CGSysTimeResponse.SerializeToString,
            ),
            'GetPlayerInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPlayerInfo,
                    request_deserializer=CGData__pb2.CGVoidData.FromString,
                    response_serializer=CGData__pb2.CGCharacterData.SerializeToString,
            ),
            'SetPlayerFlagEnabled': grpc.unary_unary_rpc_method_handler(
                    servicer.SetPlayerFlagEnabled,
                    request_deserializer=CGData__pb2.CGPlayerFlagEnabledData.FromString,
                    response_serializer=CGData__pb2.CGVoidData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CGData.MLRpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MLRpcService(object):
    """HookDll用来通信，暂时不启用
    """

    @staticmethod
    def Initialize(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.MLRpcService/Initialize',
            CGData__pb2.CGGmeTypeRequest.SerializeToString,
            CGData__pb2.CGVoidData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Connect(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.MLRpcService/Connect',
            CGData__pb2.CGVoidData.SerializeToString,
            CGData__pb2.CGBoolData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def IsInGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.MLRpcService/IsInGame',
            CGData__pb2.CGVoidData.SerializeToString,
            CGData__pb2.CGIntData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetWorldStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.MLRpcService/GetWorldStatus',
            CGData__pb2.CGVoidData.SerializeToString,
            CGData__pb2.CGIntData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetGameStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.MLRpcService/GetGameStatus',
            CGData__pb2.CGVoidData.SerializeToString,
            CGData__pb2.CGIntData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetBGMIndex(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.MLRpcService/GetBGMIndex',
            CGData__pb2.CGVoidData.SerializeToString,
            CGData__pb2.CGIntData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetSysTime(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.MLRpcService/GetSysTime',
            CGData__pb2.CGVoidData.SerializeToString,
            CGData__pb2.CGSysTimeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPlayerInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.MLRpcService/GetPlayerInfo',
            CGData__pb2.CGVoidData.SerializeToString,
            CGData__pb2.CGCharacterData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetPlayerFlagEnabled(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.MLRpcService/SetPlayerFlagEnabled',
            CGData__pb2.CGPlayerFlagEnabledData.SerializeToString,
            CGData__pb2.CGVoidData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class CGRpcServiceStub(object):
    """辅助和服务端通信用
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetCGItemData = channel.unary_unary(
                '/CGData.CGRpcService/GetCGItemData',
                request_serializer=CGData__pb2.CGItemRequest.SerializeToString,
                response_deserializer=CGData__pb2.CGItemResponse.FromString,
                )
        self.GetConnectState = channel.unary_unary(
                '/CGData.CGRpcService/GetConnectState',
                request_serializer=CGData__pb2.CGVoidData.SerializeToString,
                response_deserializer=CGData__pb2.CGVoidData.FromString,
                )
        self.GetPetGradeCalcData = channel.unary_unary(
                '/CGData.CGRpcService/GetPetGradeCalcData',
                request_serializer=CGData__pb2.CGPetGradeCalcRequest.SerializeToString,
                response_deserializer=CGData__pb2.CGPetGradeCalcResponse.FromString,
                )
        self.GetServerStoreMapData = channel.unary_unary(
                '/CGData.CGRpcService/GetServerStoreMapData',
                request_serializer=CGData__pb2.CGMapDataRequest.SerializeToString,
                response_deserializer=CGData__pb2.CGMapDataResponse.FromString,
                )
        self.StoreCGItemData = channel.unary_unary(
                '/CGData.CGRpcService/StoreCGItemData',
                request_serializer=CGData__pb2.CGStoreItemRequest.SerializeToString,
                response_deserializer=CGData__pb2.CGStoreItemResponse.FromString,
                )
        self.StoreCGMapData = channel.unary_unary(
                '/CGData.CGRpcService/StoreCGMapData',
                request_serializer=CGData__pb2.CGStoreMapRequest.SerializeToString,
                response_deserializer=CGData__pb2.CGStoreMapResponse.FromString,
                )
        self.UploadGidData = channel.unary_unary(
                '/CGData.CGRpcService/UploadGidData',
                request_serializer=CGData__pb2.UploadGidDataRequest.SerializeToString,
                response_deserializer=CGData__pb2.UploadGidDataResponse.FromString,
                )
        self.UploadGidBankData = channel.unary_unary(
                '/CGData.CGRpcService/UploadGidBankData',
                request_serializer=CGData__pb2.UploadGidBankDataRequest.SerializeToString,
                response_deserializer=CGData__pb2.UploadGidBankDataResponse.FromString,
                )
        self.UploadMapData = channel.stream_unary(
                '/CGData.CGRpcService/UploadMapData',
                request_serializer=CGData__pb2.UploadMapDataRequest.SerializeToString,
                response_deserializer=CGData__pb2.UploadMapDataResponse.FromString,
                )
        self.DownloadMapData = channel.unary_stream(
                '/CGData.CGRpcService/DownloadMapData',
                request_serializer=CGData__pb2.DownloadMapDataRequest.SerializeToString,
                response_deserializer=CGData__pb2.DownloadMapDataResponse.FromString,
                )
        self.UploadCharcterServer = channel.unary_unary(
                '/CGData.CGRpcService/UploadCharcterServer',
                request_serializer=CGData__pb2.UploadCharcterServerRequest.SerializeToString,
                response_deserializer=CGData__pb2.UploadCharcterServerResponse.FromString,
                )
        self.Publish = channel.unary_unary(
                '/CGData.CGRpcService/Publish',
                request_serializer=CGData__pb2.StringPub.SerializeToString,
                response_deserializer=CGData__pb2.StringPub.FromString,
                )
        self.Subscribe = channel.unary_stream(
                '/CGData.CGRpcService/Subscribe',
                request_serializer=CGData__pb2.StringPub.SerializeToString,
                response_deserializer=CGData__pb2.StringPub.FromString,
                )
        self.SelectAccountGidData = channel.unary_unary(
                '/CGData.CGRpcService/SelectAccountGidData',
                request_serializer=CGData__pb2.SelectAccountGidDataRequest.SerializeToString,
                response_deserializer=CGData__pb2.SelectAccountGidDataResponse.FromString,
                )
        self.SelectGidData = channel.unary_unary(
                '/CGData.CGRpcService/SelectGidData',
                request_serializer=CGData__pb2.SelectGidDataRequest.SerializeToString,
                response_deserializer=CGData__pb2.SelectGidDataResponse.FromString,
                )
        self.SelectDstTypeGidData = channel.unary_unary(
                '/CGData.CGRpcService/SelectDstTypeGidData',
                request_serializer=CGData__pb2.SelectGidDataRequest.SerializeToString,
                response_deserializer=CGData__pb2.SelectAccountGidDataResponse.FromString,
                )
        self.SelectCharacterServer = channel.unary_unary(
                '/CGData.CGRpcService/SelectCharacterServer',
                request_serializer=CGData__pb2.SelectCharacterServerRequest.SerializeToString,
                response_deserializer=CGData__pb2.SelectCharacterServerResponse.FromString,
                )
        self.SelectTaskInfo = channel.unary_unary(
                '/CGData.CGRpcService/SelectTaskInfo',
                request_serializer=CGData__pb2.SelectTaskInfoRequest.SerializeToString,
                response_deserializer=CGData__pb2.SelectTaskInfoResponse.FromString,
                )
        self.SelectCharacterData = channel.unary_unary(
                '/CGData.CGRpcService/SelectCharacterData',
                request_serializer=CGData__pb2.SelectCharacterDataRequest.SerializeToString,
                response_deserializer=CGData__pb2.SelectCharacterDataResponse.FromString,
                )


class CGRpcServiceServicer(object):
    """辅助和服务端通信用
    """

    def GetCGItemData(self, request, context):
        """☆ 根据item的id，获取item信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetConnectState(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPetGradeCalcData(self, request, context):
        """☆ 获取所有宠物算档数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServerStoreMapData(self, request, context):
        """☆ 获取服务端所有id和map名称的映射，用于本地缓存
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreCGItemData(self, request, context):
        """☆ 客户端向服务器发送当前包裹物品信息，服务端用于缓存和更新数据库
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreCGMapData(self, request, context):
        """☆ 客户端向服务器发送地图信息，服务端缓存更新
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadGidData(self, request, context):
        """☆定时上报当辅助信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadGidBankData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadMapData(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DownloadMapData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UploadCharcterServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Publish(self, request, context):
        """发布是rpc的普通方法
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Subscribe(self, request, context):
        """订阅则是一个单向的流服务，服务端返回的数据可能很大
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectAccountGidData(self, request, context):
        """*****************客户端查询数据接口*************

        查询指定账号下各GID的角色数据
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectGidData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectDstTypeGidData(self, request, context):
        """查询指定类型的gid角色数据 例如：当前gid是哥布林仓库专用，则查询所有此类型账号 一个角色可以是全部类型
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectCharacterServer(self, request, context):
        """查询游戏角色建立的服务信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectTaskInfo(self, request, context):
        """查询游戏指定任务当前坐标
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SelectCharacterData(self, request, context):
        """☆ 查询游戏角色当前信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CGRpcServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetCGItemData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetCGItemData,
                    request_deserializer=CGData__pb2.CGItemRequest.FromString,
                    response_serializer=CGData__pb2.CGItemResponse.SerializeToString,
            ),
            'GetConnectState': grpc.unary_unary_rpc_method_handler(
                    servicer.GetConnectState,
                    request_deserializer=CGData__pb2.CGVoidData.FromString,
                    response_serializer=CGData__pb2.CGVoidData.SerializeToString,
            ),
            'GetPetGradeCalcData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPetGradeCalcData,
                    request_deserializer=CGData__pb2.CGPetGradeCalcRequest.FromString,
                    response_serializer=CGData__pb2.CGPetGradeCalcResponse.SerializeToString,
            ),
            'GetServerStoreMapData': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServerStoreMapData,
                    request_deserializer=CGData__pb2.CGMapDataRequest.FromString,
                    response_serializer=CGData__pb2.CGMapDataResponse.SerializeToString,
            ),
            'StoreCGItemData': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreCGItemData,
                    request_deserializer=CGData__pb2.CGStoreItemRequest.FromString,
                    response_serializer=CGData__pb2.CGStoreItemResponse.SerializeToString,
            ),
            'StoreCGMapData': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreCGMapData,
                    request_deserializer=CGData__pb2.CGStoreMapRequest.FromString,
                    response_serializer=CGData__pb2.CGStoreMapResponse.SerializeToString,
            ),
            'UploadGidData': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadGidData,
                    request_deserializer=CGData__pb2.UploadGidDataRequest.FromString,
                    response_serializer=CGData__pb2.UploadGidDataResponse.SerializeToString,
            ),
            'UploadGidBankData': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadGidBankData,
                    request_deserializer=CGData__pb2.UploadGidBankDataRequest.FromString,
                    response_serializer=CGData__pb2.UploadGidBankDataResponse.SerializeToString,
            ),
            'UploadMapData': grpc.stream_unary_rpc_method_handler(
                    servicer.UploadMapData,
                    request_deserializer=CGData__pb2.UploadMapDataRequest.FromString,
                    response_serializer=CGData__pb2.UploadMapDataResponse.SerializeToString,
            ),
            'DownloadMapData': grpc.unary_stream_rpc_method_handler(
                    servicer.DownloadMapData,
                    request_deserializer=CGData__pb2.DownloadMapDataRequest.FromString,
                    response_serializer=CGData__pb2.DownloadMapDataResponse.SerializeToString,
            ),
            'UploadCharcterServer': grpc.unary_unary_rpc_method_handler(
                    servicer.UploadCharcterServer,
                    request_deserializer=CGData__pb2.UploadCharcterServerRequest.FromString,
                    response_serializer=CGData__pb2.UploadCharcterServerResponse.SerializeToString,
            ),
            'Publish': grpc.unary_unary_rpc_method_handler(
                    servicer.Publish,
                    request_deserializer=CGData__pb2.StringPub.FromString,
                    response_serializer=CGData__pb2.StringPub.SerializeToString,
            ),
            'Subscribe': grpc.unary_stream_rpc_method_handler(
                    servicer.Subscribe,
                    request_deserializer=CGData__pb2.StringPub.FromString,
                    response_serializer=CGData__pb2.StringPub.SerializeToString,
            ),
            'SelectAccountGidData': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectAccountGidData,
                    request_deserializer=CGData__pb2.SelectAccountGidDataRequest.FromString,
                    response_serializer=CGData__pb2.SelectAccountGidDataResponse.SerializeToString,
            ),
            'SelectGidData': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectGidData,
                    request_deserializer=CGData__pb2.SelectGidDataRequest.FromString,
                    response_serializer=CGData__pb2.SelectGidDataResponse.SerializeToString,
            ),
            'SelectDstTypeGidData': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectDstTypeGidData,
                    request_deserializer=CGData__pb2.SelectGidDataRequest.FromString,
                    response_serializer=CGData__pb2.SelectAccountGidDataResponse.SerializeToString,
            ),
            'SelectCharacterServer': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectCharacterServer,
                    request_deserializer=CGData__pb2.SelectCharacterServerRequest.FromString,
                    response_serializer=CGData__pb2.SelectCharacterServerResponse.SerializeToString,
            ),
            'SelectTaskInfo': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectTaskInfo,
                    request_deserializer=CGData__pb2.SelectTaskInfoRequest.FromString,
                    response_serializer=CGData__pb2.SelectTaskInfoResponse.SerializeToString,
            ),
            'SelectCharacterData': grpc.unary_unary_rpc_method_handler(
                    servicer.SelectCharacterData,
                    request_deserializer=CGData__pb2.SelectCharacterDataRequest.FromString,
                    response_serializer=CGData__pb2.SelectCharacterDataResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'CGData.CGRpcService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CGRpcService(object):
    """辅助和服务端通信用
    """

    @staticmethod
    def GetCGItemData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.CGRpcService/GetCGItemData',
            CGData__pb2.CGItemRequest.SerializeToString,
            CGData__pb2.CGItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetConnectState(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.CGRpcService/GetConnectState',
            CGData__pb2.CGVoidData.SerializeToString,
            CGData__pb2.CGVoidData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetPetGradeCalcData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.CGRpcService/GetPetGradeCalcData',
            CGData__pb2.CGPetGradeCalcRequest.SerializeToString,
            CGData__pb2.CGPetGradeCalcResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServerStoreMapData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.CGRpcService/GetServerStoreMapData',
            CGData__pb2.CGMapDataRequest.SerializeToString,
            CGData__pb2.CGMapDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StoreCGItemData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.CGRpcService/StoreCGItemData',
            CGData__pb2.CGStoreItemRequest.SerializeToString,
            CGData__pb2.CGStoreItemResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def StoreCGMapData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.CGRpcService/StoreCGMapData',
            CGData__pb2.CGStoreMapRequest.SerializeToString,
            CGData__pb2.CGStoreMapResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadGidData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.CGRpcService/UploadGidData',
            CGData__pb2.UploadGidDataRequest.SerializeToString,
            CGData__pb2.UploadGidDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadGidBankData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.CGRpcService/UploadGidBankData',
            CGData__pb2.UploadGidBankDataRequest.SerializeToString,
            CGData__pb2.UploadGidBankDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadMapData(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/CGData.CGRpcService/UploadMapData',
            CGData__pb2.UploadMapDataRequest.SerializeToString,
            CGData__pb2.UploadMapDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DownloadMapData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/CGData.CGRpcService/DownloadMapData',
            CGData__pb2.DownloadMapDataRequest.SerializeToString,
            CGData__pb2.DownloadMapDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def UploadCharcterServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.CGRpcService/UploadCharcterServer',
            CGData__pb2.UploadCharcterServerRequest.SerializeToString,
            CGData__pb2.UploadCharcterServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Publish(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.CGRpcService/Publish',
            CGData__pb2.StringPub.SerializeToString,
            CGData__pb2.StringPub.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Subscribe(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/CGData.CGRpcService/Subscribe',
            CGData__pb2.StringPub.SerializeToString,
            CGData__pb2.StringPub.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelectAccountGidData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.CGRpcService/SelectAccountGidData',
            CGData__pb2.SelectAccountGidDataRequest.SerializeToString,
            CGData__pb2.SelectAccountGidDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelectGidData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.CGRpcService/SelectGidData',
            CGData__pb2.SelectGidDataRequest.SerializeToString,
            CGData__pb2.SelectGidDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelectDstTypeGidData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.CGRpcService/SelectDstTypeGidData',
            CGData__pb2.SelectGidDataRequest.SerializeToString,
            CGData__pb2.SelectAccountGidDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelectCharacterServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.CGRpcService/SelectCharacterServer',
            CGData__pb2.SelectCharacterServerRequest.SerializeToString,
            CGData__pb2.SelectCharacterServerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelectTaskInfo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.CGRpcService/SelectTaskInfo',
            CGData__pb2.SelectTaskInfoRequest.SerializeToString,
            CGData__pb2.SelectTaskInfoResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SelectCharacterData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/CGData.CGRpcService/SelectCharacterData',
            CGData__pb2.SelectCharacterDataRequest.SerializeToString,
            CGData__pb2.SelectCharacterDataResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
